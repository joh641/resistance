manual game start and game end

steps
1) hit site
2) signIn
    if cookie, set player number to
    else, prompt for name, push PlayerSignIn event
3) all players will have a game state representation generated by snapshots
    {
      players [ { name, number } ],
      gameVersion,
      currentLeader,
      currentMission,
      failedVotes,
      previousResults,
      role
    }
4) once players all signed in, one player will run the game controller / game start
    game controller state
        leaderPosition
        roles
        schema
        failedVotes
        mission
            votes
            mission cards
        pastMissionResults

        run assignRoles, shuffle and assign images as well
    push SetRole events for each player { player, role, img }
    push SpiesReveal

        set initial leader or run move leader token
    push LeaderChange event { leaderPosition }

    push BuildTeam event { mission, numPlayers }
    listen for TeamChosen event { team }
    push TeamVote event
    listen for Vote events { vote }
        store results in this.votingResults / mission / round object
        calculate results once numPlayers vote events received
    push VotingResults event { result, votes: [ { player, vote } ] }
        if vote fails, bump failedVotes, check if game is over, if not go back to push LeaderChange step
        if game over, push GameOver event { result, roles: [ { player, role } ] }
        if vote passes, reset failedVotes
    push ConductMission event { team: [ player ] }
    listen for MissionCardChosen events { missionCard }
        store results in this.missionResults / mission / round object
        shuffle
        calculate results once mission numPlayers events received
        store results
    push MissionResults event { result, missionCards }
        if any side is at 3 wins, push GameOver event { winner, roles: [ { player, role } ] }
        else, go back to push LeaderChange event step

    game end
        reset state
        push GameClear event
        clear out firebase onGameClear
5) all clients are responsible for
    listen for SetRole event
        if player === currentPlayer, set role
        update player loyalty card to role
    listen for SpiesReveal event
        display something, then remove after a while

    listen for LeaderChange event
        move leader token
        store leaderPosition
        highlight current mission
    listen for BuildTeam event
        if leader === currentPlayer,
            allow selection of leaders (clicking of images, submit button)
            push TeamChosen event
    listen for TeamChosen event
        highlight team
    listen for TeamVote event
        display vote tokens, allow selection by clicking, submit button
        push Vote event
    listen for VotingResults event
        display each person's votes, hide after a while?
    listen for ConductMission event
        if player on mission,
            display mission cards, allow selection by clicking, submit button
            push MissionCardChosen event
    listen for MissionResults event
        display mission cards face up
        display resistance/spy win + token
        unhighlight team after a while

    always listen for gameover / gameclear
        on gameover, display roles
        on gameclear, reset state and ui

storage of votes / previous teams?
todo: steps for if a master fails, page refresh
get latest event timestamp, ignore prompt events less than?
or set push capability off until all messages loaded

future: shared stream for some events, but clients also have a separate stream between them and master
gameroom stream
user online status stream

// READ
// their role
// names of other players
// mission track
  // mission number
  // number of players per mission
  // pass/fail status
  // fails required if > 1
// vote track
// number of players, number of spies
// mission leader
// mission candidates
// mission votes
// mission pass/fails

// WRITE
// mission candidates if leader
// mission votes
// mission pass/fail if in mission

